/**
 * ALCHEM UIÈõÜÊàêÊ®°Âùó - ÂêàÂπ∂‰∫ÜÈù¢ÊùøÁÆ°ÁêÜ„ÄÅÊòæÁ§∫Â∑•ÂÖ∑„ÄÅÊãñÊãΩÁº©ÊîæÂíåÊ†∑ÂºèÂäüËÉΩ
 * ‰ªé‰ª•‰∏ãÊ®°ÂùóÂêàÂπ∂ËÄåÊù•Ôºö
 * - panel-manager.js (Èù¢ÊùøÁÆ°ÁêÜ)
 * - display-utils.js (ÊòæÁ§∫Â∑•ÂÖ∑)
 * - resize-controller.js (ÊãñÊãΩÁº©Êîæ)
 * - display-styles.js (Ê†∑ÂºèÂÆö‰πâ)
 */

import { loadMolstarLibrary, MolstarViewer } from './molstar-core.js';

// =================== Ê†∑ÂºèÂÆö‰πâ ===================
export const display3DStyles = `
/* ComfyUIÊ†∑ÂºèÂèòÈáèÂÖºÂÆπ */
:root {
    --comfy-menu-bg: #202020;
    --comfy-input-bg: #2a2a2a;
    --comfy-input-bg-hover: #333;
    --comfy-input-bg-active: #3a3a3a;
    --bg-color: #1a1a1a;
    --fg-color: #ccc;
    --border-color: #444;
    --primary-color: #007bff;
    --primary-color-hover: #0056b3;
    --font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
}

.custom-3d-display-button {
    background: var(--comfy-input-bg, #2a2a2a);
    border: 1px solid var(--border-color, #444);
    border-radius: 4px;
    color: var(--fg-color, #ccc);
    padding: 6px 12px;
    font-size: 12px;
    cursor: pointer;
    transition: all 0.2s ease;
    margin: 2px;
    font-family: inherit;
}

.custom-3d-display-button:hover {
    background: var(--comfy-input-bg-hover, #333);
    border-color: var(--primary-color, #007bff);
}

.custom-3d-display-button:active {
    background: var(--comfy-input-bg-active, #3a3a3a);
}

.custom-3d-viewer {
    position: fixed;
    top: 40px;
    left: 36px;
    width: calc(100% - 36px);
    height: 40%;
    background: var(--comfy-menu-bg, #202020);
    border: 1px solid var(--border-color, #444);
    border-top: none;
    z-index: 8;
    display: none;
    box-shadow: 0 4px 12px rgba(0,0,0,0.4);
    transition: all 0.3s ease;
    font-family: var(--font-family, sans-serif);
}

.custom-3d-viewer-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 12px 16px;
    background: var(--comfy-menu-bg, #202020);
    border-bottom: 1px solid var(--border-color, #444);
    position: sticky;
    top: 0;
    z-index: 10;
}

.custom-3d-viewer-title {
    color: var(--fg-color, #ccc);
    font-size: 14px;
    font-weight: 500;
    margin: 0;
}

.custom-3d-viewer-close {
    background: transparent;
    border: 1px solid var(--border-color, #444);
    color: var(--fg-color, #ccc);
    padding: 4px 8px;
    border-radius: 3px;
    cursor: pointer;
    font-size: 12px;
    transition: all 0.2s ease;
}

.custom-3d-viewer-close:hover {
    background: var(--comfy-input-bg-hover, #333);
    border-color: var(--primary-color, #007bff);
}

.custom-3d-viewer-content {
    background: var(--bg-color, #1a1a1a);
    padding: 16px;
    height: calc(100% - 60px);
    overflow-y: auto;
    overflow-x: hidden;
    color: var(--fg-color, #ccc);
    font-family: var(--font-family, sans-serif);
    line-height: 1.5;
}

.info-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 16px;
    margin: 12px 0;
    padding: 12px;
    background: var(--comfy-input-bg, #2a2a2a);
    border-radius: 6px;
    border: 1px solid var(--border-color, #444);
}

.info-grid div {
    line-height: 1.6;
}

.status-info {
    background: var(--comfy-input-bg, #2a2a2a);
    border: 1px solid var(--border-color, #444);
    border-radius: 6px;
    padding: 16px;
    margin: 12px 0;
}

.status-info h4 {
    margin: 0 0 12px 0;
    color: var(--primary-color, #007bff);
    font-size: 14px;
}

.viewer-container {
    width: 100%;
    height: 400px;
    border: 1px solid var(--border-color, #444);
    border-radius: 4px;
    background: var(--bg-color, #1a1a1a);
}

.resize-border {
    position: absolute;
    z-index: 20;
}

.resize-border:hover {
    background-color: rgba(0, 123, 255, 0.3);
}

.resize-border.resizing {
    background-color: rgba(0, 123, 255, 0.5);
}

.resize-border.top {
    top: -3px;
    left: 0;
    right: 0;
    height: 6px;
    cursor: n-resize;
}

.resize-border.bottom {
    bottom: -3px;  
    left: 0;
    right: 0;
    height: 6px;
    cursor: s-resize;
}

.resize-border.left {
    left: -3px;
    top: 0;
    bottom: 0;
    width: 6px;
    cursor: w-resize;
}

.resize-border.right {
    right: -3px;
    top: 0;
    bottom: 0;
    width: 6px;
    cursor: e-resize;
}

.resize-border.top-left {
    top: -3px;
    left: -3px;
    width: 10px;
    height: 10px;
    cursor: nw-resize;
}

.resize-border.top-right {
    top: -3px;
    right: -3px;
    width: 10px;
    height: 10px;
    cursor: ne-resize;
}

.resize-border.bottom-left {
    bottom: -3px;
    left: -3px;
    width: 10px;
    height: 10px;
    cursor: sw-resize;
    background-color: rgba(0, 255, 0, 0.4);
}

.resize-border.bottom-left:hover {
    background-color: rgba(0, 255, 0, 0.7);
}

.resize-border.bottom-right {
    bottom: -3px;
    right: -3px;
    width: 10px;
    height: 10px;
    cursor: se-resize;
}

.loading-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(26, 26, 26, 0.9);
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--fg-color, #ccc);
    z-index: 1000;
}

.demo-3d-display {
    width: 100%;
    height: 300px;
    background: linear-gradient(45deg, #1a1a1a, #2a2a2a);
    border: 2px dashed var(--border-color, #444);
    border-radius: 8px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    color: var(--fg-color, #ccc);
    text-align: center;
    position: relative;
    overflow: hidden;
}

.molecule-title {
    font-size: 18px;
    font-weight: bold;
    margin-bottom: 8px;
    color: var(--primary-color, #007bff);
}

.molecule-info {
    font-size: 12px;
    opacity: 0.8;
    margin: 4px 0;
}

.loading-spinner {
    border: 3px solid var(--border-color, #444);
    border-top: 3px solid var(--primary-color, #007bff);
    border-radius: 50%;
    width: 30px;
    height: 30px;
    animation: spin 1s linear infinite;
    margin-bottom: 12px;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

.progress-bar {
    width: 200px;
    height: 4px;
    background: var(--border-color, #444);
    border-radius: 2px;
    overflow: hidden;
    margin: 12px 0;
}

.progress-fill {
    height: 100%;
    background: var(--primary-color, #007bff);
    border-radius: 2px;
    transition: width 0.3s ease;
}
`;

// =================== ÊãñÊãΩÁº©ÊîæÊéßÂà∂Âô® ===================
export class ResizeController {
    constructor() {
        this.isResizing = false;
        this.currentPanel = null;
        this.resizeData = null;
        this.minWidth = 300;
        this.minHeight = 200;
        this.maxWidth = null;
        this.maxHeight = null;
    }
    
    // Ê∑ªÂä†ÂèØÊãñÂä®ËæπÊ°ÜÁî®‰∫éË∞ÉÊï¥Èù¢ÊùøÂ§ßÂ∞è
    addResizeBorders(panel) {
        // ÂàõÂª∫ÊãñÂä®ËæπÊ°ÜÁöÑÈÖçÁΩÆ
        const borders = [
            { position: 'top', cursor: 'ns-resize' },
            { position: 'bottom', cursor: 'ns-resize' },
            { position: 'left', cursor: 'ew-resize' },
            { position: 'right', cursor: 'ew-resize' },
            { position: 'top-left', cursor: 'nw-resize' },
            { position: 'top-right', cursor: 'ne-resize' },
            { position: 'bottom-left', cursor: 'sw-resize' },
            { position: 'bottom-right', cursor: 'se-resize' }
        ];
        
        borders.forEach(border => {
            const borderElement = document.createElement('div');
            borderElement.className = `resize-border ${border.position}`;
            borderElement.style.cssText = this.getResizeBorderStyles(border.position, border.cursor);
            
            // Ê∑ªÂä†Èº†Ê†áÊåâ‰∏ã‰∫ã‰ª∂
            borderElement.addEventListener('mousedown', (e) => {
                this.startResize(e, border.position, panel);
            });
            
            panel.appendChild(borderElement);
        });
        
        console.log("üéØ Added 8-direction resize borders to panel");
    }
    
    // Ëé∑ÂèñÊãñÂä®ËæπÊ°ÜÁöÑÊ†∑Âºè
    getResizeBorderStyles(position, cursor) {
        const base = `
            position: absolute;
            cursor: ${cursor};
            background: transparent;
            transition: background 0.2s ease;
            z-index: 20;
        `;
        
        switch (position) {
            case 'top':
                return base + `
                    top: -3px; left: 0; right: 0; height: 6px;
                `;
            case 'bottom':
                return base + `
                    bottom: -3px; left: 0; right: 0; height: 6px;
                `;
            case 'left':
                return base + `
                    left: -3px; top: 0; bottom: 0; width: 6px;
                `;
            case 'right':
                return base + `
                    right: -3px; top: 0; bottom: 0; width: 6px;
                `;
            case 'top-left':
                return base + `
                    top: -3px; left: -3px; width: 10px; height: 10px;
                `;
            case 'top-right':
                return base + `
                    top: -3px; right: -3px; width: 10px; height: 10px;
                `;
            case 'bottom-left':
                return base + `
                    bottom: -3px; left: -3px; width: 10px; height: 10px;
                    background: rgba(76, 175, 80, 0.3); /* È´ò‰∫ÆÂ∑¶‰∏ãËßí */
                `;
            case 'bottom-right':
                return base + `
                    bottom: -3px; right: -3px; width: 10px; height: 10px;
                `;
            default:
                return base;
        }
    }
    
    // ÂºÄÂßãÊãñÂä®Ë∞ÉÊï¥Â§ßÂ∞è
    startResize(e, position, panel) {
        e.preventDefault();
        e.stopPropagation();
        
        this.isResizing = true;
        this.currentPanel = panel;
        
        const startX = e.clientX;
        const startY = e.clientY;
        const startWidth = parseInt(window.getComputedStyle(panel).width, 10);
        const startHeight = parseInt(window.getComputedStyle(panel).height, 10);
        const startLeft = parseInt(window.getComputedStyle(panel).left, 10);
        const startTop = parseInt(window.getComputedStyle(panel).top, 10);
        
        this.resizeData = {
            position,
            startX,
            startY,
            startWidth,
            startHeight,
            startLeft,
            startTop
        };
        
        // Ê∑ªÂä†ÂÖ®Â±ÄÈº†Ê†á‰∫ã‰ª∂
        const onMouseMove = (e) => {
            this.doResize(e);
        };
        
        const onMouseUp = () => {
            this.stopResize();
            document.removeEventListener('mousemove', onMouseMove);
            document.removeEventListener('mouseup', onMouseUp);
        };
        
        document.addEventListener('mousemove', onMouseMove);
        document.addEventListener('mouseup', onMouseUp);
        
        // ËÆæÁΩÆÂÖ®Â±ÄÊ†∑Âºè
        document.body.style.cursor = this.getCursorForPosition(position);
        document.body.style.userSelect = 'none';
        
        // Ê∑ªÂä†ÊãñÊãΩÁä∂ÊÄÅÊ†∑Âºè
        panel.classList.add('resizing');
        
        console.log(`üéØ Started resizing panel from ${position}`);
    }
    
    // ÊâßË°åÊãñÂä®Ë∞ÉÊï¥
    doResize(e) {
        if (!this.isResizing || !this.currentPanel || !this.resizeData) return;
        
        const { position, startX, startY, startWidth, startHeight, startLeft, startTop } = this.resizeData;
        const deltaX = e.clientX - startX;
        const deltaY = e.clientY - startY;
        
        // Â∞∫ÂØ∏ÈôêÂà∂
        const minWidth = this.minWidth;
        const minHeight = this.minHeight;
        const maxWidth = this.maxWidth || (window.innerWidth - 50);
        const maxHeight = this.maxHeight || (window.innerHeight - 50);
        
        let newWidth = startWidth;
        let newHeight = startHeight;
        let newLeft = startLeft;
        let newTop = startTop;
        
        // Ê†πÊçÆÊãñÂä®‰ΩçÁΩÆËÆ°ÁÆóÊñ∞Â∞∫ÂØ∏
        switch (position) {
            case 'right':
                newWidth = Math.max(minWidth, Math.min(maxWidth, startWidth + deltaX));
                break;
            case 'left':
                newWidth = Math.max(minWidth, Math.min(maxWidth, startWidth - deltaX));
                newLeft = startLeft + (startWidth - newWidth);
                break;
            case 'bottom':
                newHeight = Math.max(minHeight, Math.min(maxHeight, startHeight + deltaY));
                break;
            case 'top':
                newHeight = Math.max(minHeight, Math.min(maxHeight, startHeight - deltaY));
                newTop = startTop + (startHeight - newHeight);
                break;
            case 'bottom-right':
                newWidth = Math.max(minWidth, Math.min(maxWidth, startWidth + deltaX));
                newHeight = Math.max(minHeight, Math.min(maxHeight, startHeight + deltaY));
                break;
            case 'bottom-left':
                newWidth = Math.max(minWidth, Math.min(maxWidth, startWidth - deltaX));
                newLeft = startLeft + (startWidth - newWidth);
                newHeight = Math.max(minHeight, Math.min(maxHeight, startHeight + deltaY));
                break;
            case 'top-right':
                newWidth = Math.max(minWidth, Math.min(maxWidth, startWidth + deltaX));
                newHeight = Math.max(minHeight, Math.min(maxHeight, startHeight - deltaY));
                newTop = startTop + (startHeight - newHeight);
                break;
            case 'top-left':
                newWidth = Math.max(minWidth, Math.min(maxWidth, startWidth - deltaX));
                newLeft = startLeft + (startWidth - newWidth);
                newHeight = Math.max(minHeight, Math.min(maxHeight, startHeight - deltaY));
                newTop = startTop + (startHeight - newHeight);
                break;
        }
        
        // Â∫îÁî®Êñ∞Â∞∫ÂØ∏Âíå‰ΩçÁΩÆ
        this.currentPanel.style.width = newWidth + 'px';
        this.currentPanel.style.height = newHeight + 'px';
        this.currentPanel.style.left = newLeft + 'px';
        this.currentPanel.style.top = newTop + 'px';
    }
    
    // ÂÅúÊ≠¢ÊãñÂä®Ë∞ÉÊï¥
    stopResize() {
        if (!this.isResizing) return;
        
        this.isResizing = false;
        
        // ÊÅ¢Â§çÂÖ®Â±ÄÊ†∑Âºè
        document.body.style.cursor = '';
        document.body.style.userSelect = '';
        
        // ÁßªÈô§ÊãñÊãΩÁä∂ÊÄÅÊ†∑Âºè
        if (this.currentPanel) {
            this.currentPanel.classList.remove('resizing');
        }
        
        // Ê∏ÖÁêÜÁä∂ÊÄÅ
        this.currentPanel = null;
        this.resizeData = null;
        
        console.log("üéØ Stopped resizing panel");
    }
    
    // Ëé∑ÂèñÂØπÂ∫î‰ΩçÁΩÆÁöÑÂÖâÊ†áÊ†∑Âºè
    getCursorForPosition(position) {
        const cursors = {
            'top': 'ns-resize',
            'bottom': 'ns-resize',
            'left': 'ew-resize',
            'right': 'ew-resize',
            'top-left': 'nw-resize',
            'top-right': 'ne-resize',
            'bottom-left': 'sw-resize',
            'bottom-right': 'se-resize'
        };
        return cursors[position] || 'default';
    }
    
    // ËÆæÁΩÆÈù¢ÊùøÁöÑÊúÄÂ∞èÂíåÊúÄÂ§ßÂ∞∫ÂØ∏ÈôêÂà∂
    setResizeLimits(minWidth = 300, minHeight = 200, maxWidth = null, maxHeight = null) {
        this.minWidth = minWidth;
        this.minHeight = minHeight;
        this.maxWidth = maxWidth || (window.innerWidth - 50);
        this.maxHeight = maxHeight || (window.innerHeight - 50);
        
        console.log(`üéØ Updated resize limits: ${minWidth}x${minHeight} to ${this.maxWidth}x${this.maxHeight}`);
    }
    
    // Ëé∑ÂèñÂΩìÂâçÊòØÂê¶Ê≠£Âú®ÊãñÊãΩ
    isCurrentlyResizing() {
        return this.isResizing;
    }
    
    // Ê∏ÖÁêÜ‰∫ã‰ª∂ÁõëÂê¨Âô®
    destroy() {
        if (this.isResizing) {
            this.stopResize();
        }
        console.log("üéØ Resize controller destroyed");
    }
}

// =================== ÊòæÁ§∫Â∑•ÂÖ∑Á±ª ===================
export class DisplayUtils {
    constructor() {
        this.progressBars = new Map();
    }
    
    // ÁîüÊàêÂàÜÂ≠ê‰ø°ÊÅØÊòæÁ§∫ÁöÑHTMLÂÜÖÂÆπ
    generateMolecularDisplayHTML(molecularData, analysis, isFromBackend = false) {
        const title = analysis?.title || molecularData?.title || 'molecule';
        const dataSource = isFromBackend ? 'ÂêéÁ´ØÂÜÖÂ≠ò' : (molecularData ? 'ÂâçÁ´ØÂÜÖÂ≠ò' : 'Êñá‰ª∂Á≥ªÁªü');
        const atomCount = analysis?.atoms || molecularData?.atoms || 'N/A';
        const format = analysis?.format || molecularData?.format || 'Unknown';
        
        return `
            <div class="molecular-display-container">
                <h3 style="color: #4fc3f7; margin-bottom: 16px; text-align: center;">
                    üß™ Ê≠£Âú®ÊòæÁ§∫: ${title}
                </h3>
                
                <div class="demo-3d-display">
                    <div class="molecule-title">${title}</div>
                    <div class="molecule-info">Ê†ºÂºè: ${format}</div>
                    <div class="molecule-info">ÂéüÂ≠êÊï∞: ${atomCount}</div>
                    <div class="molecule-info">Êï∞ÊçÆÊ∫ê: ${dataSource}</div>
                    
                    <div style="margin: 20px 0; font-size: 14px; line-height: 1.6;">
                        üéØ <strong>3DÂàÜÂ≠êÁªìÊûÑÊòæÁ§∫</strong><br>
                        Âú®ÁúüÂÆûÂ∫îÁî®‰∏≠ÔºåËøôÈáå‰ºöÊòæÁ§∫‰∫§‰∫íÂºèÁöÑ3DÂàÜÂ≠êÊ®°Âûã<br>
                        ÊîØÊåÅÊóãËΩ¨„ÄÅÁº©Êîæ„ÄÅÂéüÂ≠êÈÄâÊã©Á≠âÊìç‰Ωú
                    </div>
                    
                    <div style="position: absolute; bottom: 10px; right: 10px; font-size: 12px; opacity: 0.7;">
                        ALCHEM 3D Display
                    </div>
                </div>
                
                ${this.generateMolecularInfoSection(molecularData, analysis, isFromBackend)}
            </div>
        `;
    }
    
    // ÁîüÊàêÂàÜÂ≠ê‰ø°ÊÅØËØ¶ÊÉÖÈÉ®ÂàÜ
    generateMolecularInfoSection(molecularData, analysis, isFromBackend) {
        if (isFromBackend && molecularData) {
            return `
                <div class="status-info">
                    <h4>üöÄ ÂêéÁ´ØÂÜÖÂ≠ò‰ºòÂåñ</h4>
                    <div class="info-grid">
                        <div>
                            <strong>Êñá‰ª∂Âêç:</strong> ${molecularData.filename || 'Êú™Áü•'}<br>
                            <strong>Ê†ºÂºè:</strong> ${molecularData.format_name || 'Êú™Áü•'}<br>
                            <strong>ÂéüÂ≠êÊï∞:</strong> ${molecularData.atoms || 0}
                        </div>
                        <div>
                            <strong>ÁºìÂ≠òÊó∂Èó¥:</strong> ${new Date(molecularData.cached_at * 1000).toLocaleTimeString()}<br>
                            <strong>ËÆøÈóÆÊ¨°Êï∞:</strong> ${molecularData.access_count || 0}<br>
                            <strong>ËäÇÁÇπID:</strong> ${molecularData.node_id || 'Êú™Áü•'}
                        </div>
                    </div>
                    <p style="margin: 8px 0 0 0; font-size: 12px; line-height: 1.4;">
                        üöÄ <strong>ÊÄßËÉΩ‰ºòÂåñ</strong>: ÂàÜÂ≠êÊï∞ÊçÆÂ∑≤Âú®ÂêéÁ´ØÂÜÖÂ≠ò‰∏≠ÁºìÂ≠ò<br>
                        üìä <strong>Êï∞ÊçÆÊù•Ê∫ê</strong>: Áõ¥Êé•‰ªéÂêéÁ´ØÂÜÖÂ≠òËØªÂèñÔºåÊØ´ÁßíÁ∫ßÂìçÂ∫î<br>
                        ‚ö° <strong>ÂìçÂ∫îÈÄüÂ∫¶</strong>: ÊØîÊñá‰ª∂ËØªÂèñÂø´Êï∞ÁôæÂÄçÔºåÊîØÊåÅÈ´òÈ¢ëËÆøÈóÆ<br>
                        üíæ <strong>ÊåÅ‰πÖÂåñ</strong>: Êï∞ÊçÆÂú®ÂêéÁ´ØÊåÅ‰πÖ‰øùÂ≠òÔºåÈáçÂêØÂêé‰ªçÂèØÁî®
                    </p>
                </div>
            `;
        } else if (molecularData && !isFromBackend) {
            return `
                <div class="status-info">
                    <h4>üí° ÂâçÁ´ØÂÜÖÂ≠ò‰ºòÂåñ</h4>
                    <div class="info-grid">
                        <div>
                            <strong>ÂéüÂßãÊñá‰ª∂Âêç:</strong> ${molecularData.originalName || 'Êú™Áü•'}<br>
                            <strong>ÊúçÂä°Âô®Ë∑ØÂæÑ:</strong> ${molecularData.filename || 'Êú™Áü•'}<br>
                            <strong>Êñá‰ª∂Â§ßÂ∞è:</strong> ${(molecularData.fileSize / 1024 || 0).toFixed(1)} KB
                        </div>
                        <div>
                            <strong>‰∏ä‰º†Êó∂Èó¥:</strong> ${new Date(molecularData.uploadTime || 0).toLocaleTimeString()}<br>
                            <strong>ÂÜÖÂÆπÈïøÂ∫¶:</strong> ${molecularData.content?.length || 0} Â≠óÁ¨¶<br>
                            <strong>Ê†ºÂºè:</strong> ${molecularData.format || 'Êú™Áü•'}
                        </div>
                    </div>
                    <p style="margin: 8px 0 0 0; font-size: 12px; line-height: 1.4;">
                        üöÄ <strong>ÊÄßËÉΩ‰ºòÂåñ</strong>: ÂàÜÂ≠êÊï∞ÊçÆÂ∑≤Âú®‰∏ä‰º†Êó∂Ëß£ÊûêÂπ∂Âä†ËΩΩÂà∞ÂâçÁ´ØÂÜÖÂ≠ò‰∏≠<br>
                        üìä <strong>Êï∞ÊçÆÊù•Ê∫ê</strong>: Áõ¥Êé•‰ªéÂâçÁ´ØÂÜÖÂ≠òËØªÂèñÔºåÊó†ÈúÄÈáçÂ§çÁöÑÊñá‰ª∂I/OÊìç‰Ωú<br>
                        ‚ö° <strong>ÂìçÂ∫îÈÄüÂ∫¶</strong>: ÊØ´ÁßíÁ∫ßÂà´ÁöÑÊï∞ÊçÆËÆøÈóÆÔºåÊØîÊñá‰ª∂ËØªÂèñÂø´Êï∞ÁôæÂÄç<br>
                        ‚ö†Ô∏è <strong>Âª∫ËÆÆ</strong>: Êé®ËçêÂçáÁ∫ßÂà∞ÂêéÁ´ØÂÜÖÂ≠òÂ≠òÂÇ®‰ª•Ëé∑ÂæóÊõ¥Â•ΩÁöÑÊï∞ÊçÆÊåÅ‰πÖÊÄß
                    </p>
                </div>
            `;
        } else {
            return `
                <div class="status-info">
                    <h4>${analysis?.isDemo ? 'üí° ÊºîÁ§∫ËØ¥Êòé' : '‚ö†Ô∏è ÊÄßËÉΩÊèêÁ§∫'}</h4>
                    <p style="margin: 8px 0 0 0; font-size: 12px; line-height: 1.4;">
                        ${analysis?.isDemo ? 
                            'ËøôÊòØ‰∏Ä‰∏™ÊºîÁ§∫ÊÄßÁöÑ3DÊòæÁ§∫ÂäüËÉΩÔºÅ‰ΩøÁî®ÂÜÖÁΩÆÊºîÁ§∫Êï∞ÊçÆ„ÄÇ' : 
                            'ÂΩìÂâç‰ªéÊñá‰ª∂Á≥ªÁªüËØªÂèñÊï∞ÊçÆÔºåÊÄßËÉΩËæÉÊÖ¢„ÄÇÂª∫ËÆÆÈáçÊñ∞‰∏ä‰º†Êñá‰ª∂‰ª•ÂêØÁî®ÂÜÖÂ≠òÂä†ËΩΩ‰ºòÂåñ„ÄÇ'
                        }
                        <br>Âú®ÂÆûÈôÖÂ∫îÁî®‰∏≠ÔºåËøôÈáå‰ºöÊòæÁ§∫ÁúüÊ≠£ÁöÑMolStar 3DÂàÜÂ≠êÊü•ÁúãÂô®„ÄÇ
                    </p>
                </div>
            `;
        }
    }
    
    // ÁîüÊàêÊ¨¢ËøéÁïåÈù¢HTML
    generateWelcomeHTML(molstarAvailable = false) {
        return `
            <div style="text-align: center; padding: 40px; color: var(--fg-color, #ccc);">
                <h2>üß™ ALCHEM 3DÂàÜÂ≠êÊòæÁ§∫Âô®</h2>
                <p style="margin: 20px 0; line-height: 1.6;">
                    Ê¨¢Ëøé‰ΩøÁî®ALCHEM 3DÂàÜÂ≠êÊòæÁ§∫ÂäüËÉΩÔºÅ<br>
                    ‰∏ä‰º†ÂàÜÂ≠êÊñá‰ª∂Âπ∂ÊâßË°åËäÇÁÇπÂêéÔºå3DÁªìÊûÑÂ∞ÜÂú®Ê≠§Â§ÑÊòæÁ§∫„ÄÇ
                </p>
                <div style="background: var(--comfy-input-bg, #2a2a2a); border: 1px solid var(--border-color, #444); border-radius: 6px; padding: 16px; margin: 20px 0; text-align: left;">
                    <h4 style="margin: 0 0 12px 0; color: var(--primary-color, #007bff);">ÊîØÊåÅÁöÑÊñá‰ª∂Ê†ºÂºè</h4>
                    <ul style="margin: 0; padding-left: 20px; line-height: 1.8;">
                        <li>PDB - ËõãÁôΩË¥®Êï∞ÊçÆÂ∫ìÊ†ºÂºè</li>
                        <li>MOL - ÂàÜÂ≠êÊñá‰ª∂Ê†ºÂºè</li>
                        <li>SDF - ÁªìÊûÑÊï∞ÊçÆÊñá‰ª∂</li>
                        <li>XYZ - Á¨õÂç°Â∞îÂùêÊ†áÊ†ºÂºè</li>
                        <li>Êõ¥Â§öÊ†ºÂºè...</li>
                    </ul>
                </div>
                <p style="font-size: 12px; opacity: 0.7; margin-top: 30px;">
                    ${molstarAvailable ? 
                        'üéâ MolStar 3DÊü•ÁúãÂô®Â∑≤ÂêØÁî®ÔºåÂ∞ÜÊèê‰æõ‰∏ì‰∏öÁ∫ßÂàÜÂ≠êÂèØËßÜÂåñ‰ΩìÈ™å' : 
                        'üí° ÊèêÁ§∫ÔºöÂÆâË£ÖMolStarÂ∫ìÂèØ‰ª•Ëé∑ÂæóÊõ¥Â•ΩÁöÑ3DÊòæÁ§∫ÊïàÊûú'
                    }
                </p>
            </div>
        `;
    }
    
    // ÁîüÊàêÂä†ËΩΩÁä∂ÊÄÅHTML
    generateLoadingHTML(filename, progress = 0) {
        return `
            <div style="text-align: center; margin-bottom: 20px;">
                <h3 style="color: #4fc3f7; margin-bottom: 10px;">üîÑ Ê≠£Âú®Âä†ËΩΩÂàÜÂ≠êÊñá‰ª∂...</h3>
                <p style="color: #999;">Êñá‰ª∂: ${filename}</p>
                <div style="background: #333; height: 4px; border-radius: 2px; overflow: hidden; margin: 20px 0;">
                    <div style="background: linear-gradient(45deg, #4fc3f7, #81c784); height: 100%; width: ${progress}%; transition: width 0.3s;" id="loading-progress"></div>
                </div>
            </div>
        `;
    }
    
    // ÁîüÊàêÈîôËØØ‰ø°ÊÅØHTML
    generateErrorHTML(error, suggestions = []) {
        const suggestionsList = suggestions.length > 0 ? 
            `<ul style="text-align: left; margin: 16px 0; padding-left: 20px;">
                ${suggestions.map(s => `<li>${s}</li>`).join('')}
            </ul>` : '';
            
        return `
            <div style="text-align: center; padding: 40px; color: var(--fg-color, #ccc);">
                <h3 style="color: #f44336; margin-bottom: 16px;">‚ùå ÊòæÁ§∫ÈîôËØØ</h3>
                <p style="color: #999; margin-bottom: 20px;">${error}</p>
                ${suggestionsList}
                <p style="font-size: 12px; opacity: 0.7; margin-top: 30px;">
                    Â¶ÇÊûúÈóÆÈ¢òÊåÅÁª≠Â≠òÂú®ÔºåËØ∑Ê£ÄÊü•Êñá‰ª∂Ê†ºÂºèÂíå‰∏ä‰º†ËøáÁ®ã
                </p>
            </div>
        `;
    }
    
    // ÂàõÂª∫ËøõÂ∫¶Êù°
    createProgressBar(containerId, initialProgress = 0) {
        const container = document.getElementById(containerId);
        if (!container) return null;
        
        const progressBar = document.createElement('div');
        progressBar.className = 'progress-bar';
        progressBar.innerHTML = `
            <div class="progress-fill" style="width: ${initialProgress}%"></div>
        `;
        
        container.appendChild(progressBar);
        this.progressBars.set(containerId, progressBar);
        
        return progressBar;
    }
    
    // Êõ¥Êñ∞ËøõÂ∫¶Êù°
    updateProgressBar(containerId, progress) {
        const progressBar = this.progressBars.get(containerId);
        if (progressBar) {
            const fill = progressBar.querySelector('.progress-fill');
            if (fill) {
                fill.style.width = `${Math.max(0, Math.min(100, progress))}%`;
            }
        }
        
        // ‰πüÂ∞ùËØïÊõ¥Êñ∞È°µÈù¢‰∏≠ÁöÑËøõÂ∫¶Êù°
        const pageProgressBar = document.getElementById('loading-progress');
        if (pageProgressBar) {
            pageProgressBar.style.width = `${Math.max(0, Math.min(100, progress))}%`;
        }
    }
    
    // ÂàõÂª∫Âä†ËΩΩË¶ÜÁõñÂ±Ç
    createLoadingOverlay(message = 'Âä†ËΩΩ‰∏≠...') {
        const overlay = document.createElement('div');
        overlay.className = 'loading-overlay';
        overlay.innerHTML = `
            <div>
                <div class="loading-spinner"></div>
                <p>${message}</p>
            </div>
        `;
        return overlay;
    }
    
    // ÂàõÂª∫‰ø°ÊÅØÂºπÁ™ó
    createInfoDialog(title, content, actions = []) {
        const dialog = document.createElement('div');
        dialog.className = 'info-dialog';
        dialog.style.cssText = `
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: var(--comfy-menu-bg, #202020);
            border: 1px solid var(--border-color, #444);
            border-radius: 8px;
            padding: 24px;
            max-width: 500px;
            z-index: 10000;
            box-shadow: 0 8px 32px rgba(0,0,0,0.6);
        `;
        
        const actionsHTML = actions.length > 0 ? 
            `<div style="margin-top: 20px; text-align: right;">
                ${actions.map(action => 
                    `<button onclick="${action.onclick}" style="margin-left: 8px; padding: 8px 16px; background: var(--primary-color, #007bff); border: none; border-radius: 4px; color: white; cursor: pointer;">
                        ${action.text}
                    </button>`
                ).join('')}
            </div>` : '';
        
        dialog.innerHTML = `
            <h3 style="margin: 0 0 16px 0; color: var(--primary-color, #007bff);">${title}</h3>
            <div style="color: var(--fg-color, #ccc); line-height: 1.6;">${content}</div>
            ${actionsHTML}
        `;
        
        return dialog;
    }
    
    // ÊòæÁ§∫ÈÄöÁü•
    showNotification(message, type = 'info', duration = 3000) {
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: var(--comfy-menu-bg, #202020);
            border: 1px solid var(--border-color, #444);
            border-left: 4px solid ${type === 'error' ? '#f44336' : type === 'success' ? '#4caf50' : '#2196f3'};
            border-radius: 4px;
            padding: 12px 16px;
            color: var(--fg-color, #ccc);
            max-width: 300px;
            z-index: 10001;
            opacity: 0;
            transform: translateX(100%);
            transition: all 0.3s ease;
        `;
        
        notification.textContent = message;
        document.body.appendChild(notification);
        
        // ÊòæÁ§∫Âä®Áîª
        setTimeout(() => {
            notification.style.opacity = '1';
            notification.style.transform = 'translateX(0)';
        }, 10);
        
        // Ëá™Âä®ÈöêËóè
        setTimeout(() => {
            notification.style.opacity = '0';
            notification.style.transform = 'translateX(100%)';
            setTimeout(() => notification.remove(), 300);
        }, duration);
        
        return notification;
    }
    
    // Ê†ºÂºèÂåñÊñá‰ª∂Â§ßÂ∞è
    formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }
    
    // Ê†ºÂºèÂåñÊó∂Èó¥
    formatTime(timestamp) {
        if (!timestamp) return 'Unknown';
        const date = new Date(timestamp * 1000);
        return date.toLocaleString();
    }
    
    // Ê∏ÖÁêÜÊâÄÊúâUIÂÖÉÁ¥†
    cleanup() {
        this.progressBars.clear();
        
        // Ê∏ÖÁêÜÈÄöÁü•
        document.querySelectorAll('.notification').forEach(el => el.remove());
        
        // Ê∏ÖÁêÜÂºπÁ™ó
        document.querySelectorAll('.info-dialog').forEach(el => el.remove());
        
        // Ê∏ÖÁêÜÂä†ËΩΩË¶ÜÁõñÂ±Ç
        document.querySelectorAll('.loading-overlay').forEach(el => el.remove());
        
        console.log("üß™ Display utils cleaned up");
    }
}

// =================== 3DÈù¢ÊùøÁÆ°ÁêÜÂô® ===================
export class ALCHEM3DPanelManager {
    constructor() {
        this.isVisible = false;
        this.currentData = null;
        this.panel = null;
        this.menuButton = null;
        this.isInitialized = false;
        
        // MolStarÁõ∏ÂÖ≥Â±ûÊÄß
        this.molstarAvailable = false;
        this.molstarViewer = null;
        this.viewerContainer = null;
        
        // ÈõÜÊàêÁöÑÁªÑ‰ª∂ÂÆû‰æã
        this.resizeController = new ResizeController();
        this.displayUtils = new DisplayUtils();
    }
    
    async initialize() {
        if (this.isInitialized) return;
        
        console.log("üß™ ÂàùÂßãÂåñALCHEMÁã¨Á´ãMolStarÈõÜÊàê...");
        
        // Â∫îÁî®Ê†∑Âºè
        this.applyStyles();
        
        // Áõ¥Êé•Âä†ËΩΩALCHEMËá™Â∑±ÁöÑMolStarÂ∫ì
        this.molstarAvailable = await loadMolstarLibrary();
        
        await this.createMenuButton();
        this.createPanel();
        this.isInitialized = true;
        
        console.log(`üöÄ ALCHEM 3D Panel Manager initialized (MolStar: ${this.molstarAvailable ? 'ÂèØÁî®' : '‰∏çÂèØÁî®'})`);
        if (this.molstarAvailable) {
            console.log("üéâ ALCHEMÁã¨Á´ãMolStarÈõÜÊàêÊàêÂäüÔºÅ");
        } else {
            console.log("‚ö†Ô∏è MolStarÂä†ËΩΩÂ§±Ë¥•Ôºå‰ΩøÁî®ÊºîÁ§∫Ê®°Âºè");
        }
    }
    
    // Â∫îÁî®Ê†∑ÂºèÂà∞ÊñáÊ°£
    applyStyles() {
        const styleElement = document.createElement('style');
        styleElement.textContent = display3DStyles;
        document.head.appendChild(styleElement);
        console.log("üé® Display styles applied");
    }
    
    async createMenuButton() {
        // Á≠âÂæÖComfyUIÂÆåÂÖ®Âä†ËΩΩ
        let attempts = 0;
        const maxAttempts = 50;
        
        while (attempts < maxAttempts) {
            const menubar = document.querySelector(".comfyui-menu");
            if (menubar) {
                // ÂàõÂª∫ÊåâÈíÆ
                this.menuButton = document.createElement("button");
                this.menuButton.className = "alchem-menu-button";
                this.menuButton.innerHTML = `
                    <span>üß™</span>
                    <span>3DÂàÜÂ≠êÊòæÁ§∫</span>
                `;
                
                this.menuButton.onclick = () => this.togglePanel();
                
                // ÊâæÂà∞ÂêàÈÄÇÁöÑ‰ΩçÁΩÆÊèíÂÖ•ÊåâÈíÆ (Á±ª‰ººrdkit_molstarÁöÑÊñπÂºè)
                const menuRight = menubar.querySelector(".comfyui-menu-right");
                if (menuRight && menuRight.nextElementSibling) {
                    // ÊèíÂÖ•Âà∞ËèúÂçïÂè≥‰æßÂå∫ÂüüÊóÅËæπ
                    menuRight.parentNode.insertBefore(this.menuButton, menuRight.nextElementSibling);
                } else {
                    // ÂõûÈÄÄÊñπÊ°àÔºöÊ∑ªÂä†Âà∞ËèúÂçïÊ†èÊú´Â∞æ
                    menubar.appendChild(this.menuButton);
                }
                
                console.log("üéØ Added ALCHEM 3D menu button to topbar");
                return;
            }
            
            attempts++;
            await new Promise(resolve => setTimeout(resolve, 100));
        }
        
        console.warn("‚ö†Ô∏è Could not find ComfyUI menubar, creating floating button");
        this.createFloatingButton();
    }
    
    createFloatingButton() {
        // ÂàõÂª∫ÊÇ¨ÊµÆÊåâÈíÆ‰Ωú‰∏∫ÂõûÈÄÄÊñπÊ°à
        this.menuButton = document.createElement("button");
        this.menuButton.className = "alchem-menu-button";
        this.menuButton.style.position = "fixed";
        this.menuButton.style.top = "10px";
        this.menuButton.style.right = "10px";
        this.menuButton.style.zIndex = "9999";
        this.menuButton.innerHTML = `
            <span>üß™</span>
            <span>3DÂàÜÂ≠êÊòæÁ§∫</span>
        `;
        
        this.menuButton.onclick = () => this.togglePanel();
        document.body.appendChild(this.menuButton);
        
        console.log("üéØ Created floating ALCHEM 3D button");
    }
    
    createPanel() {
        if (this.panel) return;
        
        this.panel = document.createElement('div');
        this.panel.id = 'alchem-3d-overlay-panel';
        this.panel.className = 'custom-3d-viewer';
        
        const header = document.createElement('div');
        header.className = 'custom-3d-viewer-header';
        
        const title = document.createElement('div');
        title.className = 'custom-3d-viewer-title';
        title.textContent = this.molstarAvailable ? 
            'üß™ ALCHEM MolStar 3DÊü•ÁúãÂô®' : 
            'üß™ ALCHEM 3DÂàÜÂ≠êÊòæÁ§∫Âô®';
        
        // Áä∂ÊÄÅÊåáÁ§∫Âô®
        const statusIndicator = document.createElement('div');
        statusIndicator.style.cssText = `
            width: 8px; height: 8px; border-radius: 50%; 
            background: ${this.molstarAvailable ? '#4CAF50' : '#FFC107'}; 
            margin-left: 8px; display: inline-block;
        `;
        statusIndicator.title = this.molstarAvailable ? 'MolStarÂ∑≤ÂêØÁî®' : 'ÊºîÁ§∫Ê®°Âºè';
        
        const titleContainer = document.createElement('div');
        titleContainer.style.display = 'flex';
        titleContainer.style.alignItems = 'center';
        titleContainer.appendChild(title);
        titleContainer.appendChild(statusIndicator);
        
        const closeBtn = document.createElement('button');
        closeBtn.className = 'custom-3d-viewer-close';
        closeBtn.textContent = 'ÂÖ≥Èó≠';
        closeBtn.onclick = () => this.hidePanel();
        
        header.appendChild(titleContainer);
        header.appendChild(closeBtn);
        
        // ÂàõÂª∫ÂÜÖÂÆπÂÆπÂô®
        const content = document.createElement('div');
        content.className = 'custom-3d-viewer-content';
        content.id = 'alchem-3d-content';
        content.style.padding = '0'; // ÁßªÈô§padding‰ª•‰æøMolStarÂç†Êª°Á©∫Èó¥
        
        if (this.molstarAvailable) {
            // ÂàõÂª∫MolStarÊü•ÁúãÂô®ÂÆπÂô®
            this.viewerContainer = document.createElement('div');
            this.viewerContainer.id = 'alchem-molstar-container';
            this.viewerContainer.style.cssText = `
                width: 100%; 
                height: 100%; 
                background: var(--bg-color, #1a1a1a);
                position: relative;
            `;
            content.appendChild(this.viewerContainer);
            
            // ÂàùÂßãÂåñMolStarÊü•ÁúãÂô®
            this.initializeMolstarViewer();
        } else {
            // ‰ΩøÁî®ÂéüÊúâÁöÑÊñáÊú¨ÊòæÁ§∫Ê®°Âºè
            content.style.padding = '16px';
        }
        
        this.panel.appendChild(header);
        this.panel.appendChild(content);
        
        // Ê∑ªÂä†ÊãñÊãΩÁº©ÊîæËæπÊ°Ü
        this.resizeController.addResizeBorders(this.panel);
        
        document.body.appendChild(this.panel);
        
        console.log(`üéØ Created ALCHEM 3D overlay panel (${this.molstarAvailable ? 'MolStarÊ®°Âºè' : 'ÊºîÁ§∫Ê®°Âºè'})`);
    }
    
    // ÂàùÂßãÂåñMolStarÊü•ÁúãÂô®
    async initializeMolstarViewer() {
        if (!this.molstarAvailable || !window.molstar || !this.viewerContainer) {
            console.warn("üß™ MolStar‰∏çÂèØÁî®ÔºåÊó†Ê≥ïÂàùÂßãÂåñ3DÊü•ÁúãÂô®");
            return false;
        }
        
        try {
            console.log("üß™ Ê≠£Âú®ÂàùÂßãÂåñMolStarÊü•ÁúãÂô®...");
            
            // ÂàõÂª∫MolStarÊü•ÁúãÂô®ÂÆû‰æã
            this.molstarViewer = new MolstarViewer();
            const success = await this.molstarViewer.initialize(this.viewerContainer);
            
            if (!success) {
                this.molstarAvailable = false;
                // ÈùôÈªòÂ§±Ë¥•Ôºå‰∏çÊòæÁ§∫ÈîôËØØ‰ø°ÊÅØ
                console.warn("üß™ MolStarÂàùÂßãÂåñÂ§±Ë¥•ÔºåÂ∑≤ÈùôÈªòÂõûÈÄÄ");
                return false;
            }
            
            console.log("üß™ MolStarÊü•ÁúãÂô®ÂàùÂßãÂåñÊàêÂäü");
            return true;
        } catch (error) {
            console.error("üß™ ÂàùÂßãÂåñMolStarÊü•ÁúãÂô®Â§±Ë¥•:", error);
            this.molstarAvailable = false;
            // ÈùôÈªòÂ§±Ë¥•Ôºå‰∏çÊòæÁ§∫ÈîôËØØ‰ø°ÊÅØ
            console.warn("üß™ MolStarÂàùÂßãÂåñÂºÇÂ∏∏ÔºåÂ∑≤ÈùôÈªòÂõûÈÄÄ");
            return false;
        }
    }
    
    showPanel(data = null) {
        if (!this.isInitialized) {
            console.warn("‚ö†Ô∏è Panel manager not initialized");
            return;
        }
        
        this.currentData = data;
        this.isVisible = true;
        
        // Êõ¥Êñ∞ÊåâÈíÆÁä∂ÊÄÅ
        if (this.menuButton) {
            this.menuButton.classList.add('active');
        }
        
        // ÊòæÁ§∫Èù¢Êùø
        this.panel.classList.remove('panel-hiding');
        this.panel.classList.add('panel-showing');
        this.panel.style.display = 'block';
        
        // Â¶ÇÊûúÊúâÊï∞ÊçÆÔºåÁ´ãÂç≥ÊòæÁ§∫
        if (data) {
            this.displayData(data);
        } else {
            this.showWelcome();
        }
        
        console.log("üéØ ALCHEM 3D panel shown");
    }
    
    hidePanel() {
        if (!this.isVisible) return;
        
        this.isVisible = false;
        
        // Êõ¥Êñ∞ÊåâÈíÆÁä∂ÊÄÅ
        if (this.menuButton) {
            this.menuButton.classList.remove('active');
        }
        
        // ÈöêËóèÈù¢Êùø
        this.panel.classList.remove('panel-showing');
        this.panel.classList.add('panel-hiding');
        
        // Âª∂ËøüÈöêËóèÔºåÁ≠âÂæÖÂä®ÁîªÂÆåÊàê
        setTimeout(() => {
            this.panel.style.display = 'none';
            this.panel.classList.remove('panel-hiding');
        }, 300);
        
        console.log("üéØ ALCHEM 3D panel hidden");
    }
    
    togglePanel() {
        if (this.isVisible) {
            this.hidePanel();
        } else {
            this.showPanel();
        }
    }
    
    // ÊòæÁ§∫Êï∞ÊçÆ
    displayData(htmlContent) {
        if (!this.isInitialized) {
            console.warn("‚ö†Ô∏è Panel manager not initialized");
            return;
        }
        
        const content = document.getElementById('alchem-3d-content');
        if (!content) return;
        
        if (this.molstarAvailable && this.molstarViewer) {
            // MolStarÊ®°Âºè - Áõ¥Êé•Ê∏≤ÊüìÂàÜÂ≠êÊï∞ÊçÆ
            console.log("üß™ ‰ΩøÁî®MolStarÊ∏≤ÊüìÂàÜÂ≠êÊï∞ÊçÆ");
            this.molstarViewer.displayMolecularData(htmlContent);
        } else {
            // ÊñáÊú¨Ê®°Âºè - ÊòæÁ§∫HTMLÂÜÖÂÆπ
            console.log("üß™ ‰ΩøÁî®ÊñáÊú¨Ê®°ÂºèÊòæÁ§∫Êï∞ÊçÆ");
            content.style.padding = '16px';
            content.innerHTML = htmlContent;
        }
        
        this.showPanel();
    }
    
    // ÊòæÁ§∫Ê¨¢Ëøé‰ø°ÊÅØ
    showWelcome() {
        const content = document.getElementById('alchem-3d-content');
        if (!content) return;
        
        if (this.molstarAvailable) {
            // MolStarÊ®°ÂºèÂ∑≤Âú®ÂàùÂßãÂåñÊó∂Âä†ËΩΩÈªòËÆ§ÂàÜÂ≠ê
            console.log("üß™ MolStarÊ®°Âºè - ÈªòËÆ§ÂàÜÂ≠êÂ∑≤ÊòæÁ§∫");
        } else {
            content.style.padding = '16px';
            content.innerHTML = this.displayUtils.generateWelcomeHTML(this.molstarAvailable);
        }
    }
    
    // Ëé∑ÂèñÂΩìÂâçÊòæÁ§∫Áä∂ÊÄÅ
    isShowing() {
        return this.isVisible;
    }
    
    // Ëé∑ÂèñMolStarÁä∂ÊÄÅ
    isMolstarAvailable() {
        return this.molstarAvailable;
    }
    
    // ÈáçÁΩÆËßÜËßíÔºàMolStarÊ®°ÂºèÔºâ
    resetView() {
        if (this.molstarViewer) {
            this.molstarViewer.resetView();
        }
    }
    
    // ÂàáÊç¢Á∫øÊ°ÜÊ®°ÂºèÔºàMolStarÊ®°ÂºèÔºâ
    toggleWireframe() {
        if (this.molstarViewer) {
            this.molstarViewer.toggleWireframe();
        }
    }
    
    // Ê∏ÖÁêÜËµÑÊ∫ê
    destroy() {
        if (this.molstarViewer) {
            this.molstarViewer.destroy();
        }
        
        if (this.resizeController) {
            this.resizeController.destroy();
        }
        
        if (this.displayUtils) {
            this.displayUtils.cleanup();
        }
        
        if (this.panel) {
            this.panel.remove();
        }
        
        if (this.menuButton) {
            this.menuButton.remove();
        }
        
        this.isInitialized = false;
        this.isVisible = false;
        console.log("üß™ ALCHEM 3D Panel Manager destroyed");
    }
}

// =================== Ê†∑ÂºèÂ∫îÁî®ÂáΩÊï∞ ===================
export function applyStyles() {
    const styleElement = document.createElement('style');
    styleElement.textContent = display3DStyles;
    document.head.appendChild(styleElement);
    console.log("üé® Display styles applied");
}

// =================== ÂêëÂêéÂÖºÂÆπÁöÑÂØºÂá∫ ===================
// ‰øùÊåÅÊâÄÊúâÂéüÊúâÁöÑÁ±ªÂíåÂáΩÊï∞ÂØºÂá∫ÔºåÁ°Æ‰øùÂêëÂêéÂÖºÂÆπ
export { ALCHEM3DPanelManager as default };

// Áªü‰∏ÄÈîôËØØÂ§ÑÁêÜ
function handleError(error, context = 'Unknown') {
    console.error(`üß™ ALCHEM UIÈõÜÊàêÊ®°ÂùóÈîôËØØ [${context}]:`, error);
    
    // ÂèØ‰ª•Âú®ËøôÈáåÊ∑ªÂä†Áªü‰∏ÄÁöÑÈîôËØØÊä•ÂëäÈÄªËæë
    if (window.ALCHEM_ERROR_HANDLER) {
        window.ALCHEM_ERROR_HANDLER(error, context);
    }
}

// Áªü‰∏ÄÊó•ÂøóËÆ∞ÂΩï
function logInfo(message, data = null) {
    console.log(`üß™ ${message}`, data || '');
    
    // ÂèØ‰ª•Âú®ËøôÈáåÊ∑ªÂä†Áªü‰∏ÄÁöÑÊó•ÂøóËÆ∞ÂΩïÈÄªËæë
    if (window.ALCHEM_LOGGER) {
        window.ALCHEM_LOGGER('info', message, data);
    }
}

// Ê®°ÂùóÂàùÂßãÂåñÊó•Âøó
console.log("üß™ ALCHEM UIÈõÜÊàêÊ®°ÂùóÂ∑≤Âä†ËΩΩ - ÂåÖÂê´Èù¢ÊùøÁÆ°ÁêÜ„ÄÅÊòæÁ§∫Â∑•ÂÖ∑„ÄÅÊãñÊãΩÁº©ÊîæÂíåÊ†∑ÂºèÂäüËÉΩ");